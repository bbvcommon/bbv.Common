<?xml version="1.0"?>
<project name="bbv.Common" default="build" xmlns="http://nant.sf.net/release/0.85/nant.xsd">
  <description>
    Contains targets to
    - build a debug or release version
    - execute unit tests

    The default is to build a debug version. If you want a release version, the cmdline should look
    something like this: 'nant build_release'
  </description>

    <property name="project.name" value="bbv.Common"/>
  
    <property name="nant.settings.currentframework" value="net-4.0" />
  
    <property name="base_dir" value="${project::get-base-directory()}\.." readonly="true" />
    <property name="binaries" value="${base_dir}\binaries" readonly="true" />
    <property name="sources" value="${base_dir}\source" readonly="true" />
    <property name="publish" value="${base_dir}\publish" readonly="true" />
    <property name="tools_dir" value="${base_dir}\tools" />
    <property name="xUnitConsole" value="${tools_dir}\xUnit\xunit.console.clr4.x86.exe" />
    <property name="mspec" value="${sources}\packages\Machine.Specifications.0.5.6.0\tools\mspec-clr4.exe" />
    <property name="git" value="${tools_dir}\git\git.exe" />
    <property name="nuget.console" value="${tools_dir}\NuGet\nuget.exe" />
  
    <property name="version" value="0" />

    <property name="build_config" value="Release" />
    <property name="build_succeeded" value="false" />
  <property name="parallelBuild" value="true" overwrite="false" readonly="false" />
  
  <sysinfo failonerror="false" />

  <!--
  =========================================================
  Main targets
  ========================================================= 
    -->
  <target name="integrate" depends="clean, build_release, tests" 
          description="Build and exectute unit tests for developers before commit their changes.">
  </target>
  
  <target name="publish" depends="clean" 
          description="Builds a publish version with version number.">
    
    <mkdir dir="${publish}" />
   
    <call target="set_version" />  
    <call target="build_release" />
    <call target="copy_bin" />
    <call target="tests" />
    <call target="revert_version" />
    <call target="package" />
    <call target="nuget" />

    <echo message="built version ${version}.0.${timestamp}." />
  </target>
  
  <!--
  =========================================================
  Build targets
  ========================================================= 
    -->
  <target name="build" description="Builds a debug version">
    <property name="build_config" value="Debug" />
    <call target="build_bbvCommon" />
  </target>

  <target name="build_release" description="Builds a release version">
    <call target="build_bbvCommon" />
  </target>	
  
  <!--
  =========================================================
  internal targets
  ========================================================= 
   -->

  <target name="clean" description="Cleans all files">
    <echo message="Starting cleaning of solutions" />
    <delete failonerror="false">
      <fileset basedir="${publish}">
        <include name="**/*" />
      </fileset>
    </delete>
    <delete failonerror="false">
      <fileset basedir="${binaries}">
        <include name="**/*" />
      </fileset>
    </delete>
    <foreach item="Folder" property="foldername">
      <in>
        <items basedir="${sources}">					
          <include name="**/bin" />
        </items>
      </in>
      <do>
        <delete dir="${foldername}" failonerror="false" />
      </do>
    </foreach>
    <echo message="Completion cleaning of solutions" />
  </target>	
  
  <target name="clean-packages" description="Cleans all packages">
    <echo message="Starting cleaning of packages" />
	<foreach item="File" property="file">
      <in>
        <items basedir="${sources}/packages">					
          <include name="**/*" />
          <exclude name=".gitignore" />
          <exclude name="repositories.config" />
        </items>
      </in>
      <do>
        <delete file="${file}" failonerror="false" />
      </do>
    </foreach>
    <foreach item="Folder" property="foldername">
      <in>
        <items basedir="${sources}/packages">					
          <include name="**/*" />
        </items>
      </in>
      <do>
        <delete dir="${foldername}" failonerror="false" />
      </do>
    </foreach>
    <echo message="Completion cleaning of packages" />
  </target>	
  
  <target name="build_bbvCommon" description="Builds all projects of the bbv.Common solution">	
    <echo message="Starting compilation of solutions" />
    <tstamp />
    <property name="maxcpucount" value="" />
    <if test="${environment::variable-exists('MAX_CPU_COUNT')}">
      <property name="maxcpucount" value="/maxcpucount:${environment::get-variable('MAX_CPU_COUNT')}" />
    </if>
    <echo message="Max CPU count is ${maxcpucount}." />
    <property name="msBuild.exe" value="${framework::get-framework-directory('net-4.0')}/msbuild.exe" />
    <property name="standardargs" value="/p:Configuration=${build_config} /p:Platform=&quot;Any CPU&quot; /verbosity:minimal /fileLogger /fileLoggerParameters:LogFile=${base_dir}/msbuild.log" />
    <choose>
      <when test="${parallelBuild}">
        <exec program="${msBuild.exe}" failonerror="true">
          <arg value="${sources}/${project.name}.sln"/>
          <arg line="${standardargs} /m ${maxcpucount}"/>
        </exec>		
      </when>
      <otherwise>
        <exec program="${msBuild.exe}" failonerror="true">
          <arg value="${sources}/${project.name}.sln"/>
          <arg line="${standardargs}"/>
        </exec>	
      </otherwise>
    </choose>
    <echo message="Time: ${tstamp.time}" />
    <property name="build_succeeded" value="true" />
    <echo message="Completed compilation of solutions" />
  </target>

  <target name="tests" description="Execute unit tests.">
	<call target="NunitTests" />
	<call target="xUnitTests" />
	<call target="MSpecTests" />
  </target>
  
  <target name="NunitTests">
	<echo message="---- run NUnit tests" />
	<nunit2>
		<formatter type="Plain" />
		<test>
			<assemblies basedir="${sources}">
				<exclude name="**/bin/${build_config}/*Silverlight.Test.dll" />
				<include name="**/bin/${build_config}/*Test.dll" />
			</assemblies>
		</test>
    </nunit2>
  </target>
  
  <target name="xUnitTests">
	<echo message="---- run xUnit tests" />
	<foreach item="File" property="xunittestfilename">
		<in>
			<items basedir="${base_dir}">
				<exclude name="**/bin/${build_config}/*Silverlight.Test.dll" />
				<include name="**/bin/${build_config}/*Test.dll" />
			</items>
		</in>
		<do>
			<exec program="${xUnitConsole}" commandline="${xunittestfilename}" />
		</do>
	</foreach>
  </target>
  
  <target name="MSpecTests">
	<echo message="---- run MSpec" />
	<mkdir dir="${binaries}" />
	<foreach item="File" property="mspectestfilename">
		<in>
			<items basedir="${base_dir}">
				<include name="**/bin/${build_config}/*Specification.dll" />
			</items>
		</in>
		<do>
			<exec program="${mspec}" commandline="--html ${binaries}\${path::get-file-name(mspectestfilename)}.html --teamcity ${mspectestfilename}" />
		</do>
	</foreach>
  </target>

  <target name="copy_bin" description="Copies the builded output to the top bin directory">
    <!--if="${build_succeeded}">-->
    <echo message="copying files to ${binaries}\${build_config}\" />

    <foreach item="Folder" property="folder">
      <in>
        <items>
          <exclude name="${sources}\bbv.Common.Test" />
          <exclude name="${sources}\bbv.Common.*.Test" />
          <exclude name="${sources}\bbv.Common.*.Specification" />
          <exclude name="${sources}\bbv.Common.*.Sample" />
          <exclude name="${sources}\bbv.Common.*.Performance" />
          <exclude name="${sources}\.*" />
          <include name="${sources}\bbv.Common*" />
        </items>
      </in>
      <do>
        <property name="project" value="${path::get-file-name(folder)}" />

        <copy overwrite="false" todir="${binaries}\${build_config}\" flatten="false">
          <fileset basedir="${folder}/bin/${build_config}">
            <include name="**/${project}.dll" />
            <include name="**/${project}.xml" />
            <include name="**/${project}.pdb" />
          </fileset>
        </copy>
        
        <!-- copy additionally needed files -->
        <property name="dependenciesFile" value="${folder}\Dependencies.txt" />
        <if test="${file::exists(dependenciesFile)}">
          <echo message="copying additional files for ${project}" />
          
          <foreach item="Line" in="${dependenciesFile}" property="dependency">
            <do>
              <copy overwrite="false" todir="${binaries}\${build_config}\" flatten="false">
                <fileset basedir="${folder}/bin/${build_config}">
                  <include name="**/${dependency}" />
                </fileset>
              </copy>
            </do>
          </foreach>
        </if>
        
      </do>
    </foreach>
  </target>

  <target name="package">
    <zip zipfile="${publish}\${project.name}-${version}.0.${timestamp}.zip">
      <fileset basedir="${binaries}\${build_config}">
        <include name="**/*" />
      </fileset>
    </zip>
  </target>
  
  <target name="nuget" description="Copies the nuget output to the top bin directory" >
   
    <property name="nuget.basedir" value="${publish}\NuGet" />
    <mkdir dir="${nuget.basedir}" />
    
    <foreach item="File" property="nuspec">
      <in>
        <items>
          <include name="${sources}/**/*.nuspec" />
        </items>
      </in>
      <do>
        
        <property name="nugetFolder" value="${binaries}\${build_config}\${path::get-file-name-without-extension(nuspec)}" />
        <property name="nugetFile" value="${nugetFolder}\${path::get-file-name(nuspec)}" />
        
        <loadfile file="${nuspec}" property="content" />
        <foreach item="Line" in="${publish}\versions.txt" delim="," property="projectname,projectversion,nextversion,fileversion">
          <do>
            <property name="content" value="${string::replace(content, '%' + projectname + '%', '[' + projectversion + ',' + nextversion + ')')}" />
            <property name="content" value="${string::replace(content, '%' + projectname + 'FileVersion%', fileversion)}" />
          </do>
        </foreach>
        <echo message="${content}" file="${nugetFile}" />

        <copy overwrite="false" todir="${nugetFolder}">
          <fileset basedir="${base_dir}\Scripts\">
            <include name="License.txt" />
          </fileset>
        </copy>

        <exec program="${nuget.console}" commandline="pack ${nugetFile}" />
        <move todir="${publish}\NuGet\">
          <fileset basedir="${base_dir}\Scripts\">
            <include name="*.nupkg" />
          </fileset>
        </move>
        
      </do>
    </foreach>
  </target>

  <target name="set_version" description="adds the version in GlobalAssemblyInfo.cs.">

    <!--<property name="now" value="${datetime::now()}" />
    <property name="year" value="${datetime::get-year(now)}" />
    <property name="day" value="${datetime::get-day-of-year(now)} " />
    <property name="hour" value="${datetime::get-hour(now)} " />
    <property name="min" value="${datetime::get-minute(now)} " />

    <property name="time" value="${year}${day}.${hour}${min}" />
    <property name="t" value="${string::replace(time, ' ', '')}" />
    <property name="timestamp" value="${string::substring(t, 2, string::get-length(t) - 2)}" />-->

	<version_timestamp property='timestamp'/>
	
    <loadfile file="${base_dir}\Scripts\Version.txt" property="version" />

    <foreach item="Folder" property="foldername">
      <in>
        <items>
          <exclude name="${sources}\bbv.Common.Test" />
          <exclude name="${sources}\bbv.Common.*.Test" />
          <exclude name="${sources}\bbv.Common.*.Specification" />
          <exclude name="${sources}\bbv.Common.*.Sample" />
          <exclude name="${sources}\bbv.Common.*.Performance" />
          <exclude name="${sources}\.*" />
          <include name="${sources}\bbv.Common*" />
        </items>
      </in>
      <do>
        <loadfile file="${foldername}\Version.txt" property="projversion" />
        
        <asminfo language="CSharp" output="${foldername}.VersionInfo.g.cs">
          <imports>
            <import namespace="System" />
            <import namespace="System.Reflection" />
          </imports>
          <attributes>
            <attribute type="AssemblyVersionAttribute" value="${version}.${projversion}.0.0" />
            <attribute type="AssemblyFileVersionAttribute" value="${version}.${projversion}.${timestamp}" />
          </attributes>
        </asminfo>

        <echo append="true" 
              message="${path::get-file-name(foldername)},${version}.${projversion}.0.0,${version}.${int::parse(projversion) + 1}.0.0,${version}.${projversion}.${timestamp}${environment::newline()}" 
              file="${publish}\versions.txt" />
      </do>
    </foreach>
  </target>

  <target name="revert_version" description="reverts the changes made to VersionAssemblyInfo.">
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${sources}\*.VersionInfo.g.cs" />
        </items>
      </in>
      <do>
        <echo message="reverting ${filename}"/>
        <exec
          program="${git}"
          commandline='checkout "${filename}"'
          failonerror="false"/>
      </do>
    </foreach>
  </target>
  
  <script language="C#" prefix="test" >  
<code>  
  <![CDATA[  
 [TaskName("version_timestamp")]  
 public class version_timestamp : Task  
 {  
  private string _property;  
  
  [TaskAttribute("property", Required = true)]  
  public string Property  
  {  
   get { return _property; }  
   set { _property = value; }  
  }  
  
  protected override void ExecuteTask()  
  {  
   DateTime now = DateTime.UtcNow;

   string gmtTime = now.ToString("yy") + string.Format("{0:000}", now.DayOfYear) + "." + now.ToString("HHmm");
   
   Properties.Add(_property, gmtTime);  
  
   Log(Level.Info, "[version_timestamp] :" + gmtTime);  
  }  
 }  
  ]]>  
</code>  
  </script>
</project>